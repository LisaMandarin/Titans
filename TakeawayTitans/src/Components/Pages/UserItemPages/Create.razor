@page "/useritems/create"
@using Microsoft.EntityFrameworkCore
@using TakeawayTitans.Data.Models
@inject IDbContextFactory<TakeawayTitans.Data.TakeawayTitansContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>User Create</PageTitle>

<h1>User Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="NewUser" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="NewUser.Email" class="form-control" /> 
                <ValidationMessage For="() => NewUser.Email" class="text-danger" /> 
            </div>  
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label> 
                <InputText id="password" @bind-Value="NewUser.Password" class="form-control" /> 
                <ValidationMessage For="() => NewUser.Password" class="text-danger" /> 
            </div> 
            <div class="mb-3">
                <label for="firstName" class="form-label">First Name:</label> 
                <InputText id="firstName" @bind-Value="NewUser.FirstName" class="form-control" /> 
                <ValidationMessage For="() => NewUser.FirstName" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="lastName" class="form-label">Last Name:</label> 
                <InputText id="lastName" @bind-Value="NewUser.LastName" class="form-control" /> 
                <ValidationMessage For="() => NewUser.LastName" class="text-danger" /> 
            </div> 
            <div class="mb-3">
                <label for="imageUrl" class="form-label">Image Url:</label> 
                <InputText id="imageurl" @bind-Value="NewUser.ImageUrl" class="form-control" /> 
                <ValidationMessage For="() => NewUser.ImageUrl" class="text-danger" /> 
            </div>  
            <div class="mb-3">
                <label for="role" class="form-label">Role: </label>
                <InputSelect id="role" @bind-Value="NewUser.Role" class="form-select">
                    @foreach (var role in Enum.GetValues<UserRole>())
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => NewUser.Role" class="text-danger" />
            </div>          
               
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/useritems">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User NewUser { get; set; } = new();


    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUser()
    {
        if (string.IsNullOrEmpty(NewUser.Password))
        {
            return;
        }
        NewUser.Email = NewUser.Email.Trim().ToLowerInvariant();
        NewUser.FirstName = NewUser.FirstName.Trim();

        NewUser.PasswordHash = BCrypt.Net.BCrypt.HashPassword(NewUser.Password);
        NewUser.CreatedAt = DateTime.Now;
        using var context = DbFactory.CreateDbContext();
        context.Users.Add(NewUser);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/useritems");
    }
}