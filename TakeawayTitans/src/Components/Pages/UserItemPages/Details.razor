@page "/useritems/details"
@using Microsoft.EntityFrameworkCore
@using TakeawayTitans.Data.Models
@inject IDbContextFactory<TakeawayTitans.Data.TakeawayTitansContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>User Details</PageTitle>

<h1>User Details</h1>

<div>
    <h2>User</h2>
    <hr />
    @if (User is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ID</dt>
            <dd class="col-sm-10">@User!.Id</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@User.Email</dd>
            <dt class="col-sm-2">PasswordHash</dt>
            <dd class="col-sm-10">@User.PasswordHash</dd>
            <dt class="col-sm-2">First Name</dt>
            <dd class="col-sm-10">@User.FirstName</dd>
            <dt class="col-sm-2">Last Name</dt>
            <dd class="col-sm-10">@User.LastName</dd>
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@User.Role</dd>
            <dt class="col-sm-2">Image URL</dt>
            <dd class="col-sm-10">@User.ImageUrl</dd>
            <dt class="col-sm-2">Created Time</dt>
            <dd class="col-sm-10">@User.CreatedAt.ToString("yyyy-MM-dd")</dd>
        </dl>
        <div>
            <a href="@($"/useritems/edit?id={User.Id}")">Edit</a> |
            <a href="@($"/useritems")">Back to List</a>
        </div>
    }
</div>

@code {
    private User? User;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        User = await context.Users.FirstOrDefaultAsync(user => user.Id == Id);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}