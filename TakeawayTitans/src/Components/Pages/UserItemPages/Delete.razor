@page "/useritems/delete"
@using Microsoft.EntityFrameworkCore
@using TakeawayTitans.Data.Models
@inject IDbContextFactory<TakeawayTitans.Data.TakeawayTitansContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>User Delete</PageTitle>

<h1>User Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>UserItem</h2>
    <hr />
    @if (DeletedUser is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@DeletedUser.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Hashed Password</dt>
            <dd class="col-sm-10">@DeletedUser.PasswordHash</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">First Name</dt>
            <dd class="col-sm-10">@DeletedUser.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Last Name</dt>
            <dd class="col-sm-10">@DeletedUser.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@DeletedUser.Role</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Image URL</dt>
            <dd class="col-sm-10">@DeletedUser.ImageUrl</dd>
        </dl>
        <EditForm method="post" Model="DeletedUser" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(DeletedUser is null)">Delete</button> |
            <a href="/useritems">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private User? DeletedUser;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        DeletedUser = await context.Users.FirstOrDefaultAsync(user => user.Id == Id);

        if (DeletedUser is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Users.Remove(DeletedUser!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/useritems");
    }
}